d <- ggplot(input, aes(input$pe,input$chl_small),color=input$pop, group=pop, shape=pop)
library(ggplot2)
d <- ggplot(input, aes(input$pe,input$chl_small),color=input$pop, group=pop, shape=pop)
d <- d + geom_point()
d
d
d <- ggplot(input, aes(input$pe,input$chl_small),color=input$pop, group=pop, shape=pop)
d
d <- ggplot(input, aes(input$pe,input$chl_small),color=input$pop, group=pop, shape=pop)
d <- d + geom_point(size = 1)
d
d <- ggplot(input, aes(input$pe,input$chl_small),co=input$pop, group=pop, shape=pop)
d <- ggplot(input, aes(input$pe,input$chl_small),col=input$pop, group=pop, shape=pop)
d <- d + geom_point(size = 1)
d
d <- qplot(input, aes(input$pe,input$chl_small), colour=input$pop, group=pop, shape=pop)
d <- d + geom_point(size=1)
d
d <- qplot(input, aes(input$pe,input$chl_small), colour=input$pop, group="pop", shape="pop")
d <- d + geom_point(size=1)
d
d <- qplot(input, aes(input$pe,input$chl_small), colour=input$pop)
d <- d + geom_point(size=1)
d
d <- qplot(input$pe, input$chl_small, data=input, colour=input$pop)
d <- d + geom_point(size=1)
d
d
fol <- formula(response ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
model <- rpart(fol, method="class", data=training)
library(rpart)
model <- rpart(fol, method="class", data=training)
shuffled_input <- input[sample(nrow(input), nrow(input)),]
train_length = round(nrow(input) / 2)
training <- shuffled_input[1: train_length-1, ] 
testing  <- shuffled_input[train_length: nrow(shuffled_input), ]
model <- rpart(fol, method="class", data=training)
response ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small
response
model <- rpart(fol, method="class", data=training)
fol <- formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
model <- rpart(fol, method="class", data=training)
print(model)
print(summary(training["time"]))
print(model)
print(model)
predict(model, test)
predict(model, testing)
predict(model, testing[:5,])
predict(model, testing[0:5,])
testing[0:5]
predict(model, testing[0:4,])
testing[0:4,]
predict(model, testing[0:4,]).max
?which.max
predict(model, testing[0:4,]).which.max
which.max(predict(model, testing[0:4,]))
p <- predict(model, testing[0:4,])
apply(p, which.max)
cbind(p, max=apply(p,1,max),
         max.col.num =apply(p,1,which.max) ,
         max.col.name= names(p)[apply(p,1,which.max)])
         max.col.name= names(p)[apply(p,1,which.max)])
cbind(p, max=apply(p,1,max),
         max.col.num =apply(p,1,which.max) ,
         max.col.name= names(p)[apply(p,1,which.max)])
predict(model, testing[0:4,], interval="prediction")
predict(model, testing[0:4,], interval="none")
predict(model, testing[0:4,], type="terms")
predict(model, testing[0:4,], type="class")
predict(model, testing[0:4,], type="vector")
predict(model, testing[0:4,], se.fit = TRUE)
predict(model, testing[0:4,], interval = "prediction")
predict(model, testing[0:4,], type = "terms")
predict(model, testing[0:4,])
p <- predict(model, testing[0:4,])
apply(p, 1, function(x) which.max(x))
apply(p, 1, function(x) which.max)
apply(p, 1, function(x) which.max)
apply(p, 1, function(x) max)
apply(p, 1, max)
p
apply(p, 1, max)
apply(p, 1, function(x) max(x))
apply(p, 1, function(x) max(x))
apply(p, 1, function(x) match(max(x), x))
colnames(p)[3]
apply(p, 1, function(x) colnames(p)[match(max(x), x))]
apply(p, 1, function(x) match(max(x), x))
colnames(p)[4]
apply(p, 1, function(x) match(colnames(p)[match(max(x), x)]))
apply(p, 1, function(x) match(max(x), x))
apply(p, 1, which.max)
ranks[which(df[, 1] == df[, 2])]
ranks[which(p[, 1] == p[, 2])]
ranks
apply(ranks, 1, function(x) colnames(p)[x])
apply(ranks, 0, function(x) colnames(p)[x])
?apply
apply(ranks, 1, function(x) colnames(p)[x])
apply(ranks, 1, function(x) x)
?apply
ranks
vapply(ranks, function(x) colnames(p)[x])
vapply(ranks, function(x) colnames(p)[x], FUN.VALUE )
vapply(ranks, function(x) colnames(p)[x], FUN.VALUE="")
test[:4, ]
test[0:4, ]
testing[0:4,]
testing[0:4,]["pop"]
vapply(ranks, function(x) colnames(p)[x], FUN.VALUE="")
o1 <- vapply(ranks, function(x) colnames(p)[x], FUN.VALUE="")
as.data.frame(o1)
as.data.frame(o1) == testing[0:4,]["pop"]
merge(as.data.frame(o1), testing[0:4,]["pop"])
as.data.frame(o1)
testing[0:4,]["pop"]
merge(as.data.frame(o1), testing[0:4,]["pop"], by="ID")
o1 == as.vector(testing[0:4,]["pop"])
sum(o1 == as.vector(testing[0:4,]["pop"]))
nrow(o1 == as.vector(testing[0:4,]["pop"]))
p <- predict(model, testing)
max_idx <- apply(p, 1, which.max)
o1 <- as.data.frame(vapply(max_idx, function(x) colnames(p)[x], FUN.VALUE=""))
o1 <- as.data.frame(vapply(max_idx, function(x) colnames(p)[x], FUN.VALUE=""))
o1
o1 == as.vector(testing["pop"])
as.vector(testing["pop"])
o1 == as.vector(testing["pop"])
ol
o1
typeof(o1)
o1 <- as.data.frame(vapply(max_idx, function(x) colnames(p)[x], FUN.VALUE=""))
o1 <- vapply(max_idx, function(x) colnames(p)[x], FUN.VALUE="")
o1 == as.vector(testing["pop"])
model <- randomForest(fol, data=training)
library(randomForest)
model <- randomForest(fol, data=training)
p <- predict(model, testing)
max_idx <- apply(p, 1, which.max)
apply(p, 1, which.max)
p
model <- randomForest(fol, method="class", data=training)
p <- predict(model, testing)
p
max_idx <- apply(p, 1, which.max)
fol <- formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
model <- rpart(fol, method="class", data=training)
fol <- formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
fol
p <- predict(model, testing)
p
typeof( p)
fol <- formula(pop ~ fsc_small + fsc_perp + chl_small + pe + chl_big + chl_small)
fol
fol <- formula(pop ~ fsc_small + fsc_perp + chl_small + pe + chl_big + chl_small)
model <- randomForest(fol, data=training)
library(randomForest)
model <- randomForest(fol, data=training)
pr1<-predict(model,newdata=testing,type="class")
pr2<-as.data.frame(pr1)
prob1<-sum(pr2[,1]==test$pop)/nrow(test)
prob1<-sum(pr2[,1]==testing$pop)/nrow(test)
prob1<-sum(pr2[,1]==testing$pop)/nrow(testing)
prob1
rate
importance(model)
fol <- formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
model <- rpart(fol, method="class", data=training)
library(rpart)
library(rpart)
model <- rpart(fol, method="class", data=training)
p_dt <- predict(model, testing)
max_idx <- apply(p_dt, 1, which.max)
fol <- formula(pop ~ fsc_small + fsc_perp + chl_small + pe + chl_big + chl_small)
model <- randomForest(fol, data=training)
p_rf <- predict(model,newdata=testing,type="class")
p_rf2 <- as.data.frame(p_rf)
model <- svm(fol, data=training)
library(e1071)
model <- svm(fol, data=training)
p_svm <- predict(model, newdata=testing, type="class")
p_svm2 <- as.data.frame(p_svm)
table(pred = p_rf, true=testing$pop)
table(pred = p_dt, true=testing$pop)
table(pred = p_svm, true=testing$pop)
table(pred = p_rf, true = testing$pop)
table(pred = as.data.frame(p_dt), true = testing$pop)
model <- randomForest(fol, data=training)
model <- rpart(fol, data=training)
p_dt <- predict(model, testing)
table(pred = p_dt, true = testing$pop)
nrow(testing)
testing_no_208 <- testing[which(file_id != 208),]
testing_no_208 <- testing[which(testing$file_id != 208),]
